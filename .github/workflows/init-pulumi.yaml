name: Pulumi Init
on:
  workflow_dispatch: null

jobs:
  preview:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      # This IAM Matrix should have a name with the stack name, awsAccountID, and iamRole
      # with access to deploy AWS resources in you account. The easiest method is attaching AdministratorAccess Policy to role
      # See https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/configuring-openid-connect-in-amazon-web-services for details on implementing OIDC with Github Actions
      matrix:
        arrays: [
          stack: {name: "hub", awsAccountID: "AWS_ACCOUNT_ID", iamRole: "AWS_DEPLOY_ROLE"},
          stack: {name: "dev", awsAccountID: "AWS_ACCOUNT_ID", iamRole: "AWS_DEPLOY_ROLE"},
          stack: {name: "prod", awsAccountID: "AWS_ACCOUNT_ID", iamRole: "AWS_DEPLOY_ROLE"},
        ]
    permissions:
      id-token: write
      contents: read
    name: Pulumi Init ${{ matrix.arrays.stack.name }}
    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
          ## the following creates an ARN based on the values entered into github secrets
          role-to-assume: arn:aws:iam::${{ secrets[matrix.arrays.stack.awsAccountID] }}:role/${{ secrets[matrix.arrays.stack.iamRole] }}
          role-session-name: myGitHubActions

      - name: üì¶Ô∏è Pulumi Install üì¶Ô∏è
        uses: pulumi/actions@v5

      - name: Overrides Pulumi Config üî®
        working-directory: pulumi
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
        run: |
          pulumi stack init ${{ matrix.arrays.stack.name }}
